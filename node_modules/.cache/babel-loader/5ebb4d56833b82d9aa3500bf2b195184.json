{"ast":null,"code":"import { FILTER__COLOR_FILTER_CHANGED, TODOS__ALL_COMPLETED, TODOS__COLOR_SELECTED, TODOS__COMPLETED_CLEARED, TODOS__TODOS_LOADED, TODOS__TODOS_LOADING, TODOS__TODO_ADDED, TODOS__TODO_DELETED, TODOS__TODO_TOGGLED } from \"../../actionTypes\";\nexport const todosLoading = () => {\n  return {\n    type: TODOS__TODOS_LOADING\n  };\n};\nexport const todosLoaded = todos => {\n  return {\n    type: TODOS__TODOS_LOADED,\n    payload: todos\n  };\n};\nexport const todoAdded = newTodo => {\n  return {\n    type: TODOS__TODO_ADDED,\n    payload: newTodo\n  };\n};\nexport const todosToggledCompleted = todoId => {\n  return {\n    type: TODOS__TODO_TOGGLED,\n    payload: todoId\n  };\n};\nexport const todosMarkCompleted = () => {\n  return {\n    type: TODOS__ALL_COMPLETED\n  };\n};\nexport const todosClearCompleted = todos => {\n  return {\n    type: TODOS__COMPLETED_CLEARED\n  };\n};\nexport const todosColorSelected = (color, todoId) => {\n  return {\n    type: TODOS__COLOR_SELECTED,\n    payload: {\n      color: color,\n      todoId: todoId\n    }\n  };\n};\nexport const todosDeleted = todoId => {\n  return {\n    type: TODOS__TODO_DELETED,\n    payload: todoId\n  };\n};\nexport function fetchTodos() {\n  return async function fetchTodosThunk(dispatch, getState) {\n    // todos/fetchTodos\n    // delay todos for 1000ms\n    dispatch(todosLoading());\n    setTimeout(async () => {\n      const response = await fetch('https://jsonplaceholder.typicode.com/todos?id=1&id=2&id=3&id=4&id=5');\n      const data = await response.json();\n      const todos = data.map(todo => Object.assign({\n        \"id\": todo.id,\n        \"text\": todo.title,\n        \"color\": \"\",\n        \"completed\": todo.completed\n      }));\n      dispatch(todosLoaded(todos));\n      console.log(getState());\n    }, 1);\n  };\n}\nexport function saveNewTodo(text) {\n  return async function saveNewTodoThunk(dispatch, getState) {\n    const initialTodo = {\n      text: text\n    };\n    const response = await fetch('https://jsonplaceholder.typicode.com/todos', {\n      method: 'POST',\n      body: JSON.stringify(initialTodo),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    });\n    const newTodo = await response.json();\n    console.log(\"new todo\", newTodo);\n    dispatch(todoAdded(newTodo));\n  };\n}\nexport function updateTodo(type, text) {\n  return async function updateTodoThunk(dispatch, getState) {\n    const initialTodo = {\n      text: text\n    };\n    const response = await fetch('https://jsonplaceholder.typicode.com/todos?id=1&id=2&id=3&id=4&id=5', {\n      method: 'POST',\n      body: JSON.stringify(initialTodo),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    });\n    const newTodo = await response.json();\n    console.log(\"new todo\", newTodo);\n    dispatch(todoAdded(newTodo));\n  };\n}\nexport function deleteTodo(todoId) {\n  return async function deleteTodoThunk(dispatch, getState) {\n    dispatch(todosDeleted(todoId));\n    const response = await fetch(`https://jsonplaceholder.typicode.com/todos/${todoId}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    });\n    const newTodo = await response.json();\n    console.log(\"DELTED\", newTodo);\n    console.log(\"deleted=>\", todoId);\n  };\n}","map":{"version":3,"sources":["/home/muna/code/Muna-Lombe/tutorials/React/react-redux-todo-app-with-reduxtoolkit/src/features/todos/actions.js"],"names":["FILTER__COLOR_FILTER_CHANGED","TODOS__ALL_COMPLETED","TODOS__COLOR_SELECTED","TODOS__COMPLETED_CLEARED","TODOS__TODOS_LOADED","TODOS__TODOS_LOADING","TODOS__TODO_ADDED","TODOS__TODO_DELETED","TODOS__TODO_TOGGLED","todosLoading","type","todosLoaded","todos","payload","todoAdded","newTodo","todosToggledCompleted","todoId","todosMarkCompleted","todosClearCompleted","todosColorSelected","color","todosDeleted","fetchTodos","fetchTodosThunk","dispatch","getState","setTimeout","response","fetch","data","json","map","todo","Object","assign","id","title","completed","console","log","saveNewTodo","text","saveNewTodoThunk","initialTodo","method","body","JSON","stringify","headers","updateTodo","updateTodoThunk","deleteTodo","deleteTodoThunk"],"mappings":"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","sourcesContent":["import {  FILTER__COLOR_FILTER_CHANGED, TODOS__ALL_COMPLETED, TODOS__COLOR_SELECTED, TODOS__COMPLETED_CLEARED, TODOS__TODOS_LOADED, TODOS__TODOS_LOADING, TODOS__TODO_ADDED, TODOS__TODO_DELETED, TODOS__TODO_TOGGLED } from \"../../actionTypes\"\n\nexport const todosLoading = () => {\n    return {\n        type: TODOS__TODOS_LOADING\n    }\n}\nexport const todosLoaded = (todos) => {\n    return {\n        type: TODOS__TODOS_LOADED,\n        payload: todos\n    }\n}\nexport const todoAdded = (newTodo) => {\n    return {\n        type: TODOS__TODO_ADDED,\n        payload: newTodo\n    }\n}\n\nexport const todosToggledCompleted = (todoId) => {\n    return {\n        type: TODOS__TODO_TOGGLED,\n        payload: todoId\n    }\n}\nexport const todosMarkCompleted = () => {\n    return {\n        type: TODOS__ALL_COMPLETED\n    }\n}\n\nexport const todosClearCompleted = (todos) => {\n    return {\n        type: TODOS__COMPLETED_CLEARED\n        \n    }\n}\nexport const todosColorSelected = (color, todoId) => {\n    return {\n        type: TODOS__COLOR_SELECTED,\n        payload: { color: color, todoId: todoId }\n    }\n}\nexport const todosDeleted = (todoId) => {\n    return {\n        type: TODOS__TODO_DELETED,\n        payload: todoId\n    }\n}\n\n\n\nexport function fetchTodos() {\n    return  async function fetchTodosThunk(dispatch, getState) {\n        // todos/fetchTodos\n        // delay todos for 1000ms\n        dispatch(todosLoading())\n        setTimeout(async() => {\n            const response = await fetch('https://jsonplaceholder.typicode.com/todos?id=1&id=2&id=3&id=4&id=5')\n            const data = await response.json()\n            const todos = data.map(( todo ) => Object.assign({\"id\": todo.id, \"text\": todo.title, \"color\": \"\", \"completed\": todo.completed }) )\n\n            dispatch(todosLoaded(todos))\n            console.log(getState())\n        }, 1)\n        \n    }\n   \n}\n\n\n\nexport function saveNewTodo( text ) {\n    return async function saveNewTodoThunk( dispatch, getState ) {\n        const initialTodo = { text: text }\n        const response = await fetch('https://jsonplaceholder.typicode.com/todos',\n                                    {\n                                        method: 'POST',\n                                        body: JSON.stringify(initialTodo),\n                                        headers: {\n                                            'Content-type': 'application/json; charset=UTF-8'\n                                        }\n                                    })\n        const newTodo = await response.json()\n        console.log(\"new todo\",newTodo)\n        dispatch(todoAdded(newTodo))\n        \n    }\n}\nexport function updateTodo( type, text ) {\n    return async function updateTodoThunk( dispatch, getState ) {\n\n        const initialTodo = { text: text }\n        const response = await fetch('https://jsonplaceholder.typicode.com/todos?id=1&id=2&id=3&id=4&id=5',\n                                    {\n                                        method: 'POST',\n                                        body: JSON.stringify(initialTodo),\n                                        headers: {\n                                            'Content-type': 'application/json; charset=UTF-8'\n                                        }\n                                    })\n        const newTodo = await response.json()\n        console.log(\"new todo\",newTodo)\n        dispatch(todoAdded(newTodo))\n        \n    }\n}\nexport function deleteTodo( todoId ) {\n    return async function deleteTodoThunk( dispatch, getState ) {\n        dispatch(todosDeleted(todoId))\n        const response = await fetch(`https://jsonplaceholder.typicode.com/todos/${todoId}`,\n                                    {\n                                        method: 'DELETE',\n                                        headers: {\n                                            'Content-type': 'application/json; charset=UTF-8'\n                                        }\n                                    })\n        const newTodo = await response.json()\n        console.log(\"DELTED\",newTodo)\n        console.log(\"deleted=>\", todoId)\n        \n    }\n}"]},"metadata":{},"sourceType":"module"}