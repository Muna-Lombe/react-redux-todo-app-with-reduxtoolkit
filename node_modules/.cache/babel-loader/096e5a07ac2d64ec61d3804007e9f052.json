{"ast":null,"code":"var _jsxFileName = \"/home/muna/code/Muna-Lombe/tutorials/React/react-redux-todo-app-with-reduxtoolkit/src/features/todos/TodoList.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useSelector } from 'react-redux'; // import { TODOS__TODOS_LOADING_FAILED } from '../../actionTypes'\n\nimport TodoListItem from './TodoListItem';\nimport { selectFilteredTodoIds } from './todosSlice'; // selectFilteredTodoIds\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TodoList = () => {\n  _s();\n\n  // we use shallowEqual as a second argument to useSelector because \n  // useSelector takes a comparison function as a second argument\n  // shallowEqual allows us to change how useSelector evaluates if two values are equal \n  // in order to re-render. \n  // here, because we are returning a new array reference, useSelector will cause the whole component to \n  // re-render, but because nothing has changed in the component and we only want to pass the ids to the child component\n  // we use shallowEqual to prove that the old value and new value are the same \n  // then useSelector will not re-render.\n  const todos = useSelector(selectFilteredTodoIds); // LOOK AT THIS PART AGAIN LATER, UNSAFE MUTATION OF RECEIVED TODOS\n\n  console.log(todos);\n  const loadingStatus = useSelector(state => state.todos.status);\n\n  if (loadingStatus === 'loading') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-list\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loader\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (loadingStatus === 'failure') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-list\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u26A0\\uFE0F Looks like we could not connect, try reloading the page.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  }\n\n  const renderedListItems = todos.map(todoId => {\n    return /*#__PURE__*/_jsxDEV(TodoListItem, {\n      id: todoId\n    }, todoId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 12\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"todo-list\",\n    children: renderedListItems\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this);\n};\n\n_s(TodoList, \"kVq6dv29slYVU+Qv6ZNYL9bBQU4=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = TodoList;\nexport default TodoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"sources":["/home/muna/code/Muna-Lombe/tutorials/React/react-redux-todo-app-with-reduxtoolkit/src/features/todos/TodoList.js"],"names":["React","useSelector","TodoListItem","selectFilteredTodoIds","TodoList","todos","console","log","loadingStatus","state","status","renderedListItems","map","todoId"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA2B,aAA3B,C,CACA;;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,qBAAT,QAAqC,cAArC,C,CACA;;;;AACA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,QAAMC,KAAK,GAAGJ,WAAW,CAACE,qBAAD,CAAzB,CAXqB,CAerB;;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,QAAMG,aAAa,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACJ,KAAN,CAAYK,MAAtB,CAAjC;;AAGA,MAAIF,aAAa,KAAK,SAAtB,EAAiC;AAE/B,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,MAAIA,aAAa,KAAK,SAAtB,EAAgC;AAC9B,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAGD,QAAMG,iBAAiB,GAAGN,KAAK,CAACO,GAAN,CAAYC,MAAF,IAAc;AAChD,wBAAO,QAAC,YAAD;AAA2B,MAAA,EAAE,EAAEA;AAA/B,OAAmBA,MAAnB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFyB,CAA1B;AAIA,sBAAO;AAAI,IAAA,SAAS,EAAC,WAAd;AAAA,cAA2BF;AAA3B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA7CD;;GAAMP,Q;UAWUH,W,EAMQA,W;;;KAjBlBG,Q;AA+CN,eAAeA,QAAf","sourcesContent":["import React from 'react'\nimport { useSelector} from 'react-redux'\n// import { TODOS__TODOS_LOADING_FAILED } from '../../actionTypes'\nimport TodoListItem from './TodoListItem'\nimport { selectFilteredTodoIds} from './todosSlice'\n// selectFilteredTodoIds\nconst TodoList = () => {\n  // we use shallowEqual as a second argument to useSelector because \n  // useSelector takes a comparison function as a second argument\n  // shallowEqual allows us to change how useSelector evaluates if two values are equal \n  // in order to re-render. \n  // here, because we are returning a new array reference, useSelector will cause the whole component to \n  // re-render, but because nothing has changed in the component and we only want to pass the ids to the child component\n  // we use shallowEqual to prove that the old value and new value are the same \n  // then useSelector will not re-render.\n\n\n  const todos = useSelector(selectFilteredTodoIds)\n  \n\n\n  // LOOK AT THIS PART AGAIN LATER, UNSAFE MUTATION OF RECEIVED TODOS\n  console.log(todos)\n  const loadingStatus = useSelector(state => state.todos.status)\n\n  \n  if (loadingStatus === 'loading') {\n   \n    return (\n      <div className=\"todo-list\">\n        <div className=\"loader\" />\n      </div>\n    )\n  }\n\n  if (loadingStatus === 'failure'){\n    return ( \n      <div className=\"todo-list\">\n        <h3>\n          ⚠️ Looks like we could not connect, try reloading the page.\n        </h3>\n      </div>\n    )\n  }\n  \n  \n  const renderedListItems = todos.map(( todoId ) => {\n    return <TodoListItem key={todoId} id={todoId} />\n  })\n\n  return <ul className=\"todo-list\">{renderedListItems}</ul>\n}\n\nexport default TodoList"]},"metadata":{},"sourceType":"module"}