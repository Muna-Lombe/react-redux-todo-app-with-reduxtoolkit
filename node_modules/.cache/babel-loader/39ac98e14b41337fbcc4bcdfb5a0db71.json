{"ast":null,"code":"import { createSelector } from \"reselect\";\nimport { FILTER__COLOR_FILTER_CHANGED, TODOS__ALL_COMPLETED, TODOS__COLOR_SELECTED, TODOS__COMPLETED_CLEARED, TODOS__TODOS_LOADING, TODOS__TODOS_LOADING_FAILED, TODOS__TODOS_LOADED, TODOS__TODO_ADDED, TODOS__TODO_DELETED, TODOS__TODO_TOGGLED } from \"../../actionTypes\";\nimport { StatusFilters } from \"../filters/filtersSlice\";\nexport const StateStatus = {\n  IDLE_STATUS: 'idle',\n  LOADING_STATUS: 'loading',\n  SUCCESS_STATUS: 'success',\n  FAILURE_STATUS: 'failure'\n};\nconst initialState = {\n  status: 'idle',\n  entities: {}\n}; // const selectTodoIds = (state)=> (state.todos.map(( todo ) => todo.id ))\n\nexport const selectTodoIds = createSelector(state => state.todos.entities, entities => entities.map(todo => todo.id));\nexport const selectTodos = state => state.todos.entities;\nexport const selectTodoById = (state, todoId) => {\n  return selectTodos(state)[todoId];\n};\n/**\ntakes in two args{todos-array, current status filter} \nthen outputs a list of active or completed todos based on the filter */\n\nexport const selectFilteredTodos = createSelector(state => state.todos, state => state.filters, (todos, filters) => {\n  const {\n    status,\n    colors\n  } = filters;\n  const showAllCompletions = status === StatusFilters.All;\n\n  if (showAllCompletions && colors.length === 0) {\n    return todos.entities;\n  }\n\n  const completedStatus = status === StatusFilters.Completed;\n  const newentities = todos.entities;\n  return Object.values(newentities).filter(value => {\n    const statusMatches = showAllCompletions || value.completed === completedStatus;\n    const colorMatches = colors.length === 0 || colors.includes(value.color);\n    console.log(`matches: status${statusMatches}, color${colorMatches}`);\n    return statusMatches && colorMatches;\n  });\n});\nexport const selectFilteredTodoIds = createSelector(selectFilteredTodos, filteredTodos => {\n  console.log('filto...', filteredTodos);\n  return filteredTodos;\n});\n\nfunction nextTodoId(todos) {\n  const maxId = todos.reduce((maxId, todo) => Math.max(todo.id, maxId), -1);\n  return maxId + 1;\n}\n\nexport default function todosReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case TODOS__TODOS_LOADING:\n      {\n        return { ...state,\n          status: StateStatus.LOADING_STATUS\n        };\n      }\n\n    case TODOS__TODOS_LOADING_FAILED:\n      {\n        return { ...state,\n          status: StateStatus.FAILURE_STATUS\n        };\n      }\n\n    case TODOS__TODOS_LOADED:\n      {\n        // const stateUpdate = state.concat(action.payload)\n        // stateUpdate.map(( todo, idx ) => todo.id === idx ? \"\" : todo.id = idx)\n        // const todos = action.payload.map(( todo ))\n        const newEntities = {};\n        action.payload.forEach(todo => {\n          newEntities[todo.id] = todo;\n        });\n        return { ...state,\n          status: StateStatus.IDLE_STATUS,\n          entities: newEntities\n        };\n      }\n\n    case TODOS__TODO_ADDED:\n      {\n        return { ...state,\n          entities: { ...state.entities,\n            [action.payload.id]: { ...action.payload,\n              completed: false,\n              color: \"\"\n            }\n          }\n        };\n      }\n\n    case TODOS__TODO_TOGGLED:\n      {\n        const todoId = action.payload;\n        const todo = state.entities[todoId];\n        return { ...state,\n          entities: { ...state.entities,\n            [todoId]: { ...todo,\n              completed: !todo.completed\n            }\n          }\n        };\n      }\n\n    case TODOS__ALL_COMPLETED:\n      {\n        const newEntities = { ...state.entities\n        };\n        Object.values(newEntities).forEach(todo => {\n          newEntities[todo.id] = { ...todo,\n            completed: true\n          };\n        });\n        return { ...state,\n          entities: newEntities\n        };\n      }\n\n    case TODOS__COLOR_SELECTED:\n      {\n        const {\n          color,\n          todoId\n        } = action.payload;\n        const todo = state.entities[todoId];\n        return { ...state,\n          entities: { ...state.entities,\n            [todoId]: { ...todo,\n              color\n            }\n          }\n        };\n      }\n\n    case TODOS__COMPLETED_CLEARED:\n      {\n        const newEntities = { ...state.entities\n        };\n        Object.values(newEntities).forEach(todo => {\n          if (todo.completed) {\n            delete newEntities[todo.id];\n          }\n        });\n        return { ...state,\n          entities: newEntities\n        };\n      }\n\n    case TODOS__TODO_DELETED:\n      {\n        const newEntities = { ...state.entities\n        };\n        delete newEntities[action.payload];\n        return { ...state,\n          entities: newEntities\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/muna/code/Muna-Lombe/tutorials/React/react-redux-todo-app-with-reduxtoolkit/src/features/todos/todosSlice.js"],"names":["createSelector","FILTER__COLOR_FILTER_CHANGED","TODOS__ALL_COMPLETED","TODOS__COLOR_SELECTED","TODOS__COMPLETED_CLEARED","TODOS__TODOS_LOADING","TODOS__TODOS_LOADING_FAILED","TODOS__TODOS_LOADED","TODOS__TODO_ADDED","TODOS__TODO_DELETED","TODOS__TODO_TOGGLED","StatusFilters","StateStatus","IDLE_STATUS","LOADING_STATUS","SUCCESS_STATUS","FAILURE_STATUS","initialState","status","entities","selectTodoIds","state","todos","map","todo","id","selectTodos","selectTodoById","todoId","selectFilteredTodos","filters","colors","showAllCompletions","All","length","completedStatus","Completed","newentities","Object","values","filter","value","statusMatches","completed","colorMatches","includes","color","console","log","selectFilteredTodoIds","filteredTodos","nextTodoId","maxId","reduce","Math","max","todosReducer","action","type","newEntities","payload","forEach"],"mappings":"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","sourcesContent":["import { createSelector } from \"reselect\"\nimport {  FILTER__COLOR_FILTER_CHANGED, TODOS__ALL_COMPLETED, TODOS__COLOR_SELECTED, TODOS__COMPLETED_CLEARED, TODOS__TODOS_LOADING,TODOS__TODOS_LOADING_FAILED,TODOS__TODOS_LOADED, TODOS__TODO_ADDED, TODOS__TODO_DELETED, TODOS__TODO_TOGGLED } from \"../../actionTypes\"\nimport { StatusFilters } from \"../filters/filtersSlice\"\n\nexport const StateStatus = {\n    IDLE_STATUS : 'idle',\n    LOADING_STATUS : 'loading',\n    SUCCESS_STATUS : 'success',\n    FAILURE_STATUS : 'failure',\n}\nconst initialState = {\n    status: 'idle',\n    entities: {}\n}\n   \n\n    \n// const selectTodoIds = (state)=> (state.todos.map(( todo ) => todo.id ))\nexport const selectTodoIds = createSelector ( \n    state => state.todos.entities,\n    entities => entities.map( todo => todo.id )\n)\nexport const selectTodos = (state) => state.todos.entities\nexport const selectTodoById = (state, todoId) => {\n    \n    return selectTodos(state)[todoId]\n  }\n\n/**\ntakes in two args{todos-array, current status filter} \nthen outputs a list of active or completed todos based on the filter */\nexport const selectFilteredTodos = createSelector(\n    state => state.todos,\n    state => state.filters,\n    ( todos, filters ) => {\n        const { status, colors } = filters\n        const showAllCompletions = status === StatusFilters.All\n\n        if( showAllCompletions && colors.length === 0 ) {\n            return todos.entities\n        }\n        const completedStatus = status === StatusFilters.Completed\n        const newentities = todos.entities\n        return Object.values(newentities).filter(( value ) => {\n\n            const statusMatches = showAllCompletions || value.completed === completedStatus\n            const colorMatches = colors.length === 0 || colors.includes(value.color)\n            console.log(`matches: status${statusMatches}, color${colorMatches}`)\n            return statusMatches && colorMatches\n        })\n    }\n)\n\nexport const selectFilteredTodoIds = createSelector(\n    selectFilteredTodos,\n\n    filteredTodos => {\n        console.log('filto...', filteredTodos)\n        return filteredTodos\n    }\n)\n\nfunction nextTodoId( todos ) {\n    const maxId = todos.reduce((maxId, todo) => Math.max(todo.id, maxId), -1)\n    return maxId + 1\n}\nexport default function todosReducer ( state = initialState, action) {\n    switch ( action.type ) {\n        case TODOS__TODOS_LOADING: {\n            return {\n                ...state,\n                status: StateStatus.LOADING_STATUS\n            }\n        }\n        case TODOS__TODOS_LOADING_FAILED: {\n            return {\n                ...state,\n                status: StateStatus.FAILURE_STATUS\n            }\n        }\n        case TODOS__TODOS_LOADED: {\n            // const stateUpdate = state.concat(action.payload)\n            // stateUpdate.map(( todo, idx ) => todo.id === idx ? \"\" : todo.id = idx)\n            // const todos = action.payload.map(( todo ))\n            const newEntities = {}\n            action.payload.forEach(todo => {\n                newEntities[todo.id] = todo\n            })\n            return {\n                ...state,\n                status: StateStatus.IDLE_STATUS,\n                entities: newEntities\n                \n            }\n        }\n        case TODOS__TODO_ADDED: {\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    [action.payload.id]: {\n                        ...action.payload,\n                        completed: false,\n                        color: \"\"\n                    }\n                }\n            }\n                \n        }\n        case TODOS__TODO_TOGGLED: {\n            const todoId = action.payload\n            const todo = state.entities[todoId]\n            return {\n                ...state,\n                entities:  {\n                    ...state.entities,\n                    [todoId]: {\n                        ...todo, \n                        completed: !todo.completed\n                    }\n                }\n            }\n        }\n        case TODOS__ALL_COMPLETED: {\n            const newEntities = { ...state.entities }\n            Object.values(newEntities).forEach(todo => {\n                newEntities[todo.id] = {\n                ...todo,\n                completed: true\n                }\n            })\n            return {\n                ...state,\n                entities: newEntities\n            }\n        }\n        case TODOS__COLOR_SELECTED: {\n            const { color, todoId } = action.payload\n            const todo = state.entities[todoId]\n            return {\n                ...state,\n                entities:  {\n                    ...state.entities,\n                    [todoId]: {\n                        ...todo,\n                        color\n                    }\n                }\n            }\n        }\n        case TODOS__COMPLETED_CLEARED: {\n            const newEntities = { ...state.entities }\n            Object.values(newEntities).forEach(todo => {\n                if (todo.completed) {\n                delete newEntities[todo.id]\n                }\n            })\n            return {\n                ...state,\n                entities: newEntities\n            }\n        }\n        case TODOS__TODO_DELETED: {\n            const newEntities = { ...state.entities }\n            \n            delete newEntities[action.payload]\n            return {\n              ...state,\n              entities: newEntities\n            }\n        }\n        default: \n            return state\n    }\n}\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}