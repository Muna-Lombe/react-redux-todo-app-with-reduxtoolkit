{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"; // import { createSelector } from \"reselect\"\n// import {  FILTER__COLOR_FILTER_CHANGED, TODOS__ALL_COMPLETED, TODOS__COLOR_SELECTED, TODOS__COMPLETED_CLEARED, TODOS__TODOS_LOADING,TODOS__TODOS_LOADING_FAILED,TODOS__TODOS_LOADED, TODOS__TODO_ADDED, TODOS__TODO_DELETED, TODOS__TODO_TOGGLED } from \"../../actionTypes\"\n// import { StatusFilters } from \"../filters/filtersSlice\"\n// ///////////////////////////////////////////////////////////////////////////\n// ////////////////////////////// WITHOUT REDUX TOOLKIT /////////////////////////   \n// export const StateStatus = {\n//     IDLE_STATUS : 'idle',\n//     LOADING_STATUS : 'loading',\n//     SUCCESS_STATUS : 'success',\n//     FAILURE_STATUS : 'failure',\n// }\n// const initialState = {\n//     status: 'idle',\n//     entities: {}\n// }\n//    \n// \n//  \n// const selectTodoIds = (state)=> (state.todos.map(( todo ) => todo.id ))\n// export const selectTodoIds = createSelector ( \n//     state => state.todos.entities,\n//     entities => entities.map( todo => todo.id )\n// )\n// export const selectTodos = (state) => state.todos.entities\n// export const selectTodoById = (state, todoId) => {\n//     return selectTodos(state)[todoId]\n//   }\n// /**\n// takes in two args{todos-array, current status filter} \n// then outputs a list of active or completed todos based on the filter */\n// export const selectFilteredTodos = createSelector(\n//     state => state.todos,\n//     state => state.filters,\n//     ( todos, filters ) => {\n//         const { status, colors } = filters\n//         const showAllCompletions = status === StatusFilters.All\n//         if( showAllCompletions && colors.length === 0 ) {\n//             return todos.entities\n//         }\n//         const completedStatus = status === StatusFilters.Completed\n//         const newentities = todos.entities\n//         return Object.values(newentities).filter(( value ) => {\n//             const statusMatches = showAllCompletions || value.completed === completedStatus\n//             const colorMatches = colors.length === 0 || colors.includes(value.color)\n//             console.log(`matches: status${statusMatches}, color${colorMatches}`)\n//             return statusMatches && colorMatches\n//         })\n//     }\n// )\n// export const selectFilteredTodoIds = createSelector(\n//     selectFilteredTodos,\n//     filteredTodos => {\n//         console.log('filto...', filteredTodos)\n//         return filteredTodos\n//     }\n// )\n// // function nextTodoId( todos ) {\n//     const maxId = todos.reduce((maxId, todo) => Math.max(todo.id, maxId), -1)\n//     return maxId + 1\n// }\n// export default function todosReducer ( state = initialState, action) {\n//     switch ( action.type ) {\n//         case TODOS__TODOS_LOADING: {\n//             return {\n//                 ...state,\n//                 status: StateStatus.LOADING_STATUS\n//             }\n//         }\n//         case TODOS__TODOS_LOADING_FAILED: {\n//             return {\n//                 ...state,\n//                 status: StateStatus.FAILURE_STATUS\n//             }\n//         }\n//         case TODOS__TODOS_LOADED: {\n//             // const stateUpdate = state.concat(action.payload)\n//             // stateUpdate.map(( todo, idx ) => todo.id === idx ? \"\" : todo.id = idx)\n//             // const todos = action.payload.map(( todo ))\n//             const newEntities = {}\n//             action.payload.forEach(todo => {\n//                 newEntities[todo.id] = todo\n//             })\n//             return {\n//                 ...state,\n//                 status: StateStatus.IDLE_STATUS,\n//                 entities: newEntities\n//             }\n//         }\n//         case TODOS__TODO_ADDED: {\n//             return {\n//                 ...state,\n//                 entities: {\n//                     ...state.entities,\n//                     [action.payload.id]: {\n//                         ...action.payload,\n//                         completed: false,\n//                         color: \"\"\n//                     }\n//                 }\n//             }\n//         }\n//         case TODOS__TODO_TOGGLED: {\n//             const todoId = action.payload\n//             const todo = state.entities[todoId]\n//             return {\n//                 ...state,\n//                 entities:  {\n//                     ...state.entities,\n//                     [todoId]: {\n//                         ...todo, \n//                         completed: !todo.completed\n//                     }\n//                 }\n//             }\n//         }\n//         case TODOS__ALL_COMPLETED: {\n//             const newEntities = { ...state.entities }\n//             Object.values(newEntities).forEach(todo => {\n//                 newEntities[todo.id] = {\n//                 ...todo,\n//                 completed: true\n//                 }\n//             })\n//             return {\n//                 ...state,\n//                 entities: newEntities\n//             }\n//         }\n//         case TODOS__COLOR_SELECTED: {\n//             const { color, todoId } = action.payload\n//             const todo = state.entities[todoId]\n//             return {\n//                 ...state,\n//                 entities:  {\n//                     ...state.entities,\n//                     [todoId]: {\n//                         ...todo,\n//                         color\n//                     }\n//                 }\n//             }\n//         }\n//         case TODOS__COMPLETED_CLEARED: {\n//             const newEntities = { ...state.entities }\n//             Object.values(newEntities).forEach(todo => {\n//                 if (todo.completed) {\n//                 delete newEntities[todo.id]\n//                 }\n//             })\n//             return {\n//                 ...state,\n//                 entities: newEntities\n//             }\n//         }\n//         case TODOS__TODO_DELETED: {\n//             const newEntities = { ...state.entities }\n//             delete newEntities[action.payload]\n//             return {\n//               ...state,\n//               entities: newEntities\n//             }\n//         }\n//         default: \n//             return state\n//     }\n// }\n// ///////////////////////////////////////////////////////////////////////////\n// ////////////////////////////// WITH REDUX TOOLKIT /////////////////////////\n\nconst initialState = {\n  status: 'idle',\n  entities: {}\n};\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/todos?id=1&id=2&id=3&id=4&id=5');\n  const data = await response.json();\n  const todos = data.map(todo => Object.assign({\n    \"id\": todo.id,\n    \"text\": todo.title,\n    \"color\": \"\",\n    \"completed\": todo.completed\n  }));\n  return todos;\n});\nexport const saveNewTodos = createAsyncThunk('todos/saveNewTodo', async text => {\n  const initialTodo = {\n    text\n  };\n  const response = await fetch('https://jsonplaceholder.typicode.com/todos', {\n    method: 'POST',\n    body: JSON.stringify(initialTodo),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8'\n    }\n  });\n  const newTodo = await response.json();\n  return newTodo;\n});\nexport const updateTodo = createAsyncThunk('todos/updateTodo', async _ref => {\n  let {\n    text,\n    todoId\n  } = _ref;\n  const initialTodo = {\n    text\n  };\n  const response = await fetch(`https://jsonplaceholder.typicode.com/todos?id=${todoId}`, {\n    method: 'PUT',\n    body: JSON.stringify(initialTodo),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8'\n    }\n  });\n  const updatedTodo = await response.json();\n  return updatedTodo;\n});\nexport const deleteTodo = createAsyncThunk('todos/deleteTodo', async todoId => {\n  const response = await fetch(`https://jsonplaceholder.typicode.com/todos/${todoId}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8'\n    }\n  });\n  const deletedTodo = await response.json();\n  return {\n    id: todoId,\n    deletedTodo\n  };\n});\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    todoAdded(state, action) {\n      const todo = action.payload;\n      state.entities[todo.id] = todo;\n    },\n\n    todoToggled(state, action) {\n      const todoId = action.payload;\n      const todo = state.entities[todoId];\n      todo.completed = !todo.completed;\n    },\n\n    todoColorSelected: {\n      reducer(state, action) {\n        const {\n          color,\n          todoId\n        } = action.payload;\n        state.entities[todoId].color = color;\n      },\n\n      prepare(todoId, color) {\n        return {\n          payload: {\n            todoId,\n            color\n          }\n        };\n      }\n\n    },\n\n    todoDeleted(state, action) {\n      delete state.entities[action.payload];\n    },\n\n    allTodosCompleted(state, action) {\n      Object.values(state.entities).forEach(todo => {\n        todo.completed = true;\n      });\n    },\n\n    completedTodosCleared(state, action) {\n      Object.values(state.entities).forEach(todo => {\n        if (todo.completed) {\n          delete state.entities[todo.id];\n        }\n      });\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchTodos.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchTodos.fulfilled, (state, action) => {\n      const newEntities = {};\n      action.payload.forEach(todo => {\n        newEntities[todo.id] = todo;\n      });\n      state.entities = newEntities;\n      state.status = 'idle';\n    }).addCase(saveNewTodos.fulfilled, (state, action) => {\n      const todo = action.payload;\n      state.entities[todo.id] = todo;\n    }).addCase(updateTodo.pending, (state, action) => {\n      const todoId = action.payload.id;\n      const text = action.payload.text;\n      state.entities[todoId] = text;\n    });\n  }\n});\nexport const {\n  todoAdded,\n  todoToggled,\n  todosLoading,\n  todoColorSelected,\n  todoDeleted\n} = todosSlice.actions;\nexport default todosSlice.reducer;","map":{"version":3,"sources":["/home/muna/code/Muna-Lombe/tutorials/React/react-redux-todo-app-with-reduxtoolkit/src/features/todos/todosSlice.js"],"names":["createAsyncThunk","createSlice","initialState","status","entities","fetchTodos","response","fetch","data","json","todos","map","todo","Object","assign","id","title","completed","saveNewTodos","text","initialTodo","method","body","JSON","stringify","headers","newTodo","updateTodo","todoId","updatedTodo","deleteTodo","deletedTodo","todosSlice","name","reducers","todoAdded","state","action","payload","todoToggled","todoColorSelected","reducer","color","prepare","todoDeleted","allTodosCompleted","values","forEach","completedTodosCleared","extraReducers","builder","addCase","pending","fulfilled","newEntities","todosLoading","actions"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"\n// import { createSelector } from \"reselect\"\n// import {  FILTER__COLOR_FILTER_CHANGED, TODOS__ALL_COMPLETED, TODOS__COLOR_SELECTED, TODOS__COMPLETED_CLEARED, TODOS__TODOS_LOADING,TODOS__TODOS_LOADING_FAILED,TODOS__TODOS_LOADED, TODOS__TODO_ADDED, TODOS__TODO_DELETED, TODOS__TODO_TOGGLED } from \"../../actionTypes\"\n// import { StatusFilters } from \"../filters/filtersSlice\"\n\n\n\n\n// ///////////////////////////////////////////////////////////////////////////\n// ////////////////////////////// WITHOUT REDUX TOOLKIT /////////////////////////   \n// export const StateStatus = {\n//     IDLE_STATUS : 'idle',\n//     LOADING_STATUS : 'loading',\n//     SUCCESS_STATUS : 'success',\n//     FAILURE_STATUS : 'failure',\n// }\n// const initialState = {\n//     status: 'idle',\n//     entities: {}\n// }\n//    \n// \n//  \n// const selectTodoIds = (state)=> (state.todos.map(( todo ) => todo.id ))\n// export const selectTodoIds = createSelector ( \n//     state => state.todos.entities,\n//     entities => entities.map( todo => todo.id )\n// )\n// export const selectTodos = (state) => state.todos.entities\n// export const selectTodoById = (state, todoId) => {\n    \n//     return selectTodos(state)[todoId]\n//   }\n\n// /**\n// takes in two args{todos-array, current status filter} \n// then outputs a list of active or completed todos based on the filter */\n// export const selectFilteredTodos = createSelector(\n//     state => state.todos,\n//     state => state.filters,\n//     ( todos, filters ) => {\n//         const { status, colors } = filters\n//         const showAllCompletions = status === StatusFilters.All\n\n//         if( showAllCompletions && colors.length === 0 ) {\n//             return todos.entities\n//         }\n//         const completedStatus = status === StatusFilters.Completed\n//         const newentities = todos.entities\n//         return Object.values(newentities).filter(( value ) => {\n\n//             const statusMatches = showAllCompletions || value.completed === completedStatus\n//             const colorMatches = colors.length === 0 || colors.includes(value.color)\n//             console.log(`matches: status${statusMatches}, color${colorMatches}`)\n//             return statusMatches && colorMatches\n//         })\n//     }\n// )\n\n// export const selectFilteredTodoIds = createSelector(\n//     selectFilteredTodos,\n\n//     filteredTodos => {\n//         console.log('filto...', filteredTodos)\n//         return filteredTodos\n//     }\n// )\n\n// // function nextTodoId( todos ) {\n//     const maxId = todos.reduce((maxId, todo) => Math.max(todo.id, maxId), -1)\n//     return maxId + 1\n// }\n// export default function todosReducer ( state = initialState, action) {\n//     switch ( action.type ) {\n//         case TODOS__TODOS_LOADING: {\n//             return {\n//                 ...state,\n//                 status: StateStatus.LOADING_STATUS\n//             }\n//         }\n//         case TODOS__TODOS_LOADING_FAILED: {\n//             return {\n//                 ...state,\n//                 status: StateStatus.FAILURE_STATUS\n//             }\n//         }\n//         case TODOS__TODOS_LOADED: {\n//             // const stateUpdate = state.concat(action.payload)\n//             // stateUpdate.map(( todo, idx ) => todo.id === idx ? \"\" : todo.id = idx)\n//             // const todos = action.payload.map(( todo ))\n//             const newEntities = {}\n//             action.payload.forEach(todo => {\n//                 newEntities[todo.id] = todo\n//             })\n//             return {\n//                 ...state,\n//                 status: StateStatus.IDLE_STATUS,\n//                 entities: newEntities\n                \n//             }\n//         }\n//         case TODOS__TODO_ADDED: {\n//             return {\n//                 ...state,\n//                 entities: {\n//                     ...state.entities,\n//                     [action.payload.id]: {\n//                         ...action.payload,\n//                         completed: false,\n//                         color: \"\"\n//                     }\n//                 }\n//             }\n                \n//         }\n//         case TODOS__TODO_TOGGLED: {\n//             const todoId = action.payload\n//             const todo = state.entities[todoId]\n//             return {\n//                 ...state,\n//                 entities:  {\n//                     ...state.entities,\n//                     [todoId]: {\n//                         ...todo, \n//                         completed: !todo.completed\n//                     }\n//                 }\n//             }\n//         }\n//         case TODOS__ALL_COMPLETED: {\n//             const newEntities = { ...state.entities }\n//             Object.values(newEntities).forEach(todo => {\n//                 newEntities[todo.id] = {\n//                 ...todo,\n//                 completed: true\n//                 }\n//             })\n//             return {\n//                 ...state,\n//                 entities: newEntities\n//             }\n//         }\n//         case TODOS__COLOR_SELECTED: {\n//             const { color, todoId } = action.payload\n//             const todo = state.entities[todoId]\n//             return {\n//                 ...state,\n//                 entities:  {\n//                     ...state.entities,\n//                     [todoId]: {\n//                         ...todo,\n//                         color\n//                     }\n//                 }\n//             }\n//         }\n//         case TODOS__COMPLETED_CLEARED: {\n//             const newEntities = { ...state.entities }\n//             Object.values(newEntities).forEach(todo => {\n//                 if (todo.completed) {\n//                 delete newEntities[todo.id]\n//                 }\n//             })\n//             return {\n//                 ...state,\n//                 entities: newEntities\n//             }\n//         }\n//         case TODOS__TODO_DELETED: {\n//             const newEntities = { ...state.entities }\n            \n//             delete newEntities[action.payload]\n//             return {\n//               ...state,\n//               entities: newEntities\n//             }\n//         }\n//         default: \n//             return state\n//     }\n// }\n\n// ///////////////////////////////////////////////////////////////////////////\n// ////////////////////////////// WITH REDUX TOOLKIT /////////////////////////\nconst initialState = {\n    status: 'idle',\n    entities: {},\n  }\n\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\n    const response = await fetch('https://jsonplaceholder.typicode.com/todos?id=1&id=2&id=3&id=4&id=5')\n    const data = await response.json()\n    const todos = data.map(( todo ) => Object.assign({\"id\": todo.id, \"text\": todo.title, \"color\": \"\", \"completed\": todo.completed }) )\n    return todos\n})\n\nexport const saveNewTodos = createAsyncThunk('todos/saveNewTodo', async (text) => {\n    const initialTodo = { text }\n    const response = await fetch('https://jsonplaceholder.typicode.com/todos',\n                                {\n                                    method: 'POST',\n                                    body: JSON.stringify(initialTodo),\n                                    headers: {\n                                        'Content-type': 'application/json; charset=UTF-8'\n                                    }\n                                })\n    const newTodo = await response.json()\n    return newTodo\n})\n\nexport const updateTodo = createAsyncThunk('todos/updateTodo', async ({text, todoId}) => {\n    const initialTodo = { text }\n    const response = await fetch(`https://jsonplaceholder.typicode.com/todos?id=${todoId}`,\n                                        {\n                                            method: 'PUT',\n                                            body: JSON.stringify(initialTodo),\n                                            headers: {\n                                                'Content-type': 'application/json; charset=UTF-8'\n                                            }\n                                        })\n    const updatedTodo = await response.json()    \n    return updatedTodo                               \n})\n\nexport const deleteTodo = createAsyncThunk('todos/deleteTodo', async (todoId) => {\n    const response = await fetch(`https://jsonplaceholder.typicode.com/todos/${todoId}`,\n                                        {\n                                            method: 'DELETE',\n                                            headers: {\n                                                'Content-type': 'application/json; charset=UTF-8'\n                                            }\n                                        })\n    const deletedTodo = await response.json()\n    return { id: todoId, deletedTodo }\n\n})\n            \n    \nconst todosSlice = createSlice({\n    name: 'todos',\n    initialState,\n    reducers: {\n      todoAdded(state, action) {\n        const todo = action.payload\n        state.entities[todo.id] = todo\n      },\n      todoToggled(state, action) {\n        const todoId = action.payload\n        const todo = state.entities[todoId]\n        todo.completed = !todo.completed\n      },\n      todoColorSelected: {\n        reducer(state, action) {\n          const { color, todoId } = action.payload\n          state.entities[todoId].color = color\n        },\n        prepare(todoId, color) {\n          return {\n            payload: { todoId, color },\n          }\n        },\n      },\n      todoDeleted(state, action) {\n        delete state.entities[action.payload]\n      },\n      allTodosCompleted(state, action) {\n        Object.values(state.entities).forEach((todo) => {\n          todo.completed = true\n        })\n      },\n      completedTodosCleared(state, action) {\n        Object.values(state.entities).forEach((todo) => {\n          if (todo.completed) {\n            delete state.entities[todo.id]\n          }\n        })\n      },\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchTodos.pending, (state, action) => {\n                state.status = 'loading'\n            })\n            .addCase(fetchTodos.fulfilled, (state, action) => {\n                const newEntities = {}\n                action.payload.forEach((todo) => {\n                newEntities[todo.id] = todo\n                })\n                state.entities = newEntities\n                state.status = 'idle'\n            })\n            .addCase(saveNewTodos.fulfilled, (state, action) => {\n                const todo = action.payload\n                state.entities[todo.id] = todo\n            })\n            .addCase(updateTodo.pending, (state, action) => {\n                const todoId = action.payload.id\n                const text = action.payload.text\n                state.entities[todoId] = text\n            })\n\n    }\n  })\n\nexport const {todoAdded, todoToggled, todosLoading, todoColorSelected, todoDeleted} = todosSlice.actions\n\nexport default todosSlice.reducer\n"]},"metadata":{},"sourceType":"module"}