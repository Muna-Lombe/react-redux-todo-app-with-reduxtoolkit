{"ast":null,"code":"import { FILTER__COLOR_FILTER_CHANGED, FILTER__STATUS_FILTER_CHANGED } from \"../../actionTypes\";\nexport const StatusFilters = {\n  All: 'all',\n  Active: 'active',\n  Completed: 'completed'\n};\nconst initialState = {\n  status: StatusFilters.All,\n  colors: []\n};\nexport default function filtersReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FILTER__STATUS_FILTER_CHANGED:\n      {\n        return { ...state,\n          status: action.payload\n        };\n      }\n\n    case FILTER__COLOR_FILTER_CHANGED:\n      {\n        let {\n          color,\n          changeType\n        } = action.payload;\n        const {\n          colors\n        } = state;\n\n        switch (changeType) {\n          case 'added':\n            {\n              if (colors.includes(color)) {\n                // This color already is set as a filter. Don't change the state.\n                return state;\n              }\n\n              return { ...state,\n                colors: state.colors.concat(color)\n              };\n            }\n\n          case 'removed':\n            {\n              return { ...state,\n                colors: state.colors.filter(existingColor => existingColor !== color)\n              };\n            }\n\n          default:\n            return state;\n        }\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/muna/code/Muna-Lombe/tutorials/React/react-redux-todo-app-with-reduxtoolkit/src/features/filters/filtersSlice.js"],"names":["FILTER__COLOR_FILTER_CHANGED","FILTER__STATUS_FILTER_CHANGED","StatusFilters","All","Active","Completed","initialState","status","colors","filtersReducer","state","action","type","payload","color","changeType","includes","concat","filter","existingColor"],"mappings":"AAAA,SAASA,4BAAT,EAAuCC,6BAAvC,QAA4E,mBAA5E;AAEA,OAAO,MAAMC,aAAa,GAAG;AACzBC,EAAAA,GAAG,EAAE,KADoB;AAEzBC,EAAAA,MAAM,EAAE,QAFiB;AAGzBC,EAAAA,SAAS,EAAE;AAHc,CAAtB;AAMP,MAAMC,YAAY,GAAI;AAClBC,EAAAA,MAAM,EAAEL,aAAa,CAACC,GADJ;AAElBK,EAAAA,MAAM,EAAE;AAFU,CAAtB;AAKA,eAAe,SAASC,cAAT,GAAwD;AAAA,MAA/BC,KAA+B,uEAAvBJ,YAAuB;AAAA,MAATK,MAAS;;AACnE,UAASA,MAAM,CAACC,IAAhB;AACI,SAAKX,6BAAL;AAAoC;AAChC,eAAO,EACH,GAAGS,KADA;AAEHH,UAAAA,MAAM,EAAEI,MAAM,CAACE;AAFZ,SAAP;AAIH;;AACD,SAAKb,4BAAL;AAAmC;AAC/B,YAAI;AAAEc,UAAAA,KAAF;AAASC,UAAAA;AAAT,YAAwBJ,MAAM,CAACE,OAAnC;AACA,cAAM;AAAEL,UAAAA;AAAF,YAAaE,KAAnB;;AAEA,gBAAQK,UAAR;AACI,eAAK,OAAL;AAAc;AACV,kBAAIP,MAAM,CAACQ,QAAP,CAAgBF,KAAhB,CAAJ,EAA4B;AAC5B;AACA,uBAAOJ,KAAP;AACC;;AAED,qBAAO,EACP,GAAGA,KADI;AAEPF,gBAAAA,MAAM,EAAEE,KAAK,CAACF,MAAN,CAAaS,MAAb,CAAoBH,KAApB;AAFD,eAAP;AAIH;;AACD,eAAK,SAAL;AAAgB;AACZ,qBAAO,EACH,GAAGJ,KADA;AAEHF,gBAAAA,MAAM,EAAEE,KAAK,CAACF,MAAN,CAAaU,MAAb,CACHC,aAAD,IAAmBA,aAAa,KAAKL,KADjC;AAFL,eAAP;AAMH;;AACD;AACI,mBAAOJ,KAAP;AArBR;AAuBH;;AAED;AACI,aAAOA,KAAP;AArCR;AAuCH","sourcesContent":["import { FILTER__COLOR_FILTER_CHANGED, FILTER__STATUS_FILTER_CHANGED } from \"../../actionTypes\";\n\nexport const StatusFilters = {\n    All: 'all',\n    Active: 'active',\n    Completed: 'completed',\n  }\n\nconst initialState =  {\n    status: StatusFilters.All,\n    colors: []\n}\n\nexport default function filtersReducer( state = initialState, action ) {\n    switch ( action.type ) {\n        case FILTER__STATUS_FILTER_CHANGED: {\n            return {\n                ...state,\n                status: action.payload\n            }\n        }\n        case FILTER__COLOR_FILTER_CHANGED: {\n            let { color, changeType } = action.payload\n            const { colors } = state\n      \n            switch (changeType) {\n                case 'added': {\n                    if (colors.includes(color)) {\n                    // This color already is set as a filter. Don't change the state.\n                    return state\n                    }\n        \n                    return {\n                    ...state,\n                    colors: state.colors.concat(color),\n                    }\n                }\n                case 'removed': {\n                    return {\n                        ...state,\n                        colors: state.colors.filter(\n                            (existingColor) => existingColor !== color\n                        )\n                    }\n                }\n                default:\n                    return state\n            }\n        }\n\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}