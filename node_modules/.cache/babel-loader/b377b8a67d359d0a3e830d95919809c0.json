{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { createSelector } from \"reselect\";\nimport { FILTER__COLOR_FILTER_CHANGED, TODOS__ALL_COMPLETED, TODOS__COLOR_SELECTED, TODOS__COMPLETED_CLEARED, TODOS__TODOS_LOADING, TODOS__TODOS_LOADING_FAILED, TODOS__TODOS_LOADED, TODOS__TODO_ADDED, TODOS__TODO_DELETED, TODOS__TODO_TOGGLED } from \"../../actionTypes\";\nimport { StatusFilters } from \"../filters/filtersSlice\"; // ///////////////////////////////////////////////////////////////////////////\n// ////////////////////////////// WITHOUT REDUX TOOLKIT /////////////////////////   \n// export const StateStatus = {\n//     IDLE_STATUS : 'idle',\n//     LOADING_STATUS : 'loading',\n//     SUCCESS_STATUS : 'success',\n//     FAILURE_STATUS : 'failure',\n// }\n// const initialState = {\n//     status: 'idle',\n//     entities: {}\n// }\n//    \n// \n//  \n// const selectTodoIds = (state)=> (state.todos.map(( todo ) => todo.id ))\n// export const selectTodoIds = createSelector ( \n//     state => state.todos.entities,\n//     entities => entities.map( todo => todo.id )\n// )\n// export const selectTodos = (state) => state.todos.entities\n// export const selectTodoById = (state, todoId) => {\n//     return selectTodos(state)[todoId]\n//   }\n// /**\n// takes in two args{todos-array, current status filter} \n// then outputs a list of active or completed todos based on the filter */\n// export const selectFilteredTodos = createSelector(\n//     state => state.todos,\n//     state => state.filters,\n//     ( todos, filters ) => {\n//         const { status, colors } = filters\n//         const showAllCompletions = status === StatusFilters.All\n//         if( showAllCompletions && colors.length === 0 ) {\n//             return todos.entities\n//         }\n//         const completedStatus = status === StatusFilters.Completed\n//         const newentities = todos.entities\n//         return Object.values(newentities).filter(( value ) => {\n//             const statusMatches = showAllCompletions || value.completed === completedStatus\n//             const colorMatches = colors.length === 0 || colors.includes(value.color)\n//             console.log(`matches: status${statusMatches}, color${colorMatches}`)\n//             return statusMatches && colorMatches\n//         })\n//     }\n// )\n// export const selectFilteredTodoIds = createSelector(\n//     selectFilteredTodos,\n//     filteredTodos => {\n//         console.log('filto...', filteredTodos)\n//         return filteredTodos\n//     }\n// )\n// // function nextTodoId( todos ) {\n//     const maxId = todos.reduce((maxId, todo) => Math.max(todo.id, maxId), -1)\n//     return maxId + 1\n// }\n// export default function todosReducer ( state = initialState, action) {\n//     switch ( action.type ) {\n//         case TODOS__TODOS_LOADING: {\n//             return {\n//                 ...state,\n//                 status: StateStatus.LOADING_STATUS\n//             }\n//         }\n//         case TODOS__TODOS_LOADING_FAILED: {\n//             return {\n//                 ...state,\n//                 status: StateStatus.FAILURE_STATUS\n//             }\n//         }\n//         case TODOS__TODOS_LOADED: {\n//             // const stateUpdate = state.concat(action.payload)\n//             // stateUpdate.map(( todo, idx ) => todo.id === idx ? \"\" : todo.id = idx)\n//             // const todos = action.payload.map(( todo ))\n//             const newEntities = {}\n//             action.payload.forEach(todo => {\n//                 newEntities[todo.id] = todo\n//             })\n//             return {\n//                 ...state,\n//                 status: StateStatus.IDLE_STATUS,\n//                 entities: newEntities\n//             }\n//         }\n//         case TODOS__TODO_ADDED: {\n//             return {\n//                 ...state,\n//                 entities: {\n//                     ...state.entities,\n//                     [action.payload.id]: {\n//                         ...action.payload,\n//                         completed: false,\n//                         color: \"\"\n//                     }\n//                 }\n//             }\n//         }\n//         case TODOS__TODO_TOGGLED: {\n//             const todoId = action.payload\n//             const todo = state.entities[todoId]\n//             return {\n//                 ...state,\n//                 entities:  {\n//                     ...state.entities,\n//                     [todoId]: {\n//                         ...todo, \n//                         completed: !todo.completed\n//                     }\n//                 }\n//             }\n//         }\n//         case TODOS__ALL_COMPLETED: {\n//             const newEntities = { ...state.entities }\n//             Object.values(newEntities).forEach(todo => {\n//                 newEntities[todo.id] = {\n//                 ...todo,\n//                 completed: true\n//                 }\n//             })\n//             return {\n//                 ...state,\n//                 entities: newEntities\n//             }\n//         }\n//         case TODOS__COLOR_SELECTED: {\n//             const { color, todoId } = action.payload\n//             const todo = state.entities[todoId]\n//             return {\n//                 ...state,\n//                 entities:  {\n//                     ...state.entities,\n//                     [todoId]: {\n//                         ...todo,\n//                         color\n//                     }\n//                 }\n//             }\n//         }\n//         case TODOS__COMPLETED_CLEARED: {\n//             const newEntities = { ...state.entities }\n//             Object.values(newEntities).forEach(todo => {\n//                 if (todo.completed) {\n//                 delete newEntities[todo.id]\n//                 }\n//             })\n//             return {\n//                 ...state,\n//                 entities: newEntities\n//             }\n//         }\n//         case TODOS__TODO_DELETED: {\n//             const newEntities = { ...state.entities }\n//             delete newEntities[action.payload]\n//             return {\n//               ...state,\n//               entities: newEntities\n//             }\n//         }\n//         default: \n//             return state\n//     }\n// }\n// ///////////////////////////////////////////////////////////////////////////\n// ////////////////////////////// WITH REDUX TOOLKIT /////////////////////////\n\nconst initialState = [];\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    todoAdded(state, action) {\n      state.push(action.payload);\n    },\n\n    todoToggled(state, action) {\n      const todo = state.find(todo => todo.id === action.payload);\n      todo.completed = !todo.completed;\n    },\n\n    todosLoading(state, action) {\n      return { ...state,\n        status: 'loading'\n      };\n    }\n\n  }\n});\nexport const {\n  todoAdded,\n  todoToggled,\n  todosLoading\n} = todosSlice.actions;\nexport default todosSlice.reducer;","map":{"version":3,"sources":["/home/muna/code/Muna-Lombe/tutorials/React/react-redux-todo-app-with-reduxtoolkit/src/features/todos/todosSlice.js"],"names":["createSlice","createSelector","FILTER__COLOR_FILTER_CHANGED","TODOS__ALL_COMPLETED","TODOS__COLOR_SELECTED","TODOS__COMPLETED_CLEARED","TODOS__TODOS_LOADING","TODOS__TODOS_LOADING_FAILED","TODOS__TODOS_LOADED","TODOS__TODO_ADDED","TODOS__TODO_DELETED","TODOS__TODO_TOGGLED","StatusFilters","initialState","todosSlice","name","reducers","todoAdded","state","action","push","payload","todoToggled","todo","find","id","completed","todosLoading","status","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,cAAT,QAA+B,UAA/B;AACA,SAAUC,4BAAV,EAAwCC,oBAAxC,EAA8DC,qBAA9D,EAAqFC,wBAArF,EAA+GC,oBAA/G,EAAoIC,2BAApI,EAAgKC,mBAAhK,EAAqLC,iBAArL,EAAwMC,mBAAxM,EAA6NC,mBAA7N,QAAwP,mBAAxP;AACA,SAASC,aAAT,QAA8B,yrB;AACA,MAAMC,UAAU,GAAGd,WAAW,CAAC;AAC3Be,EAAAA,IAAI,EAAE,OADqB;AAE3BF,EAAAA,YAF2B;AAG3BG,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACrBD,MAAAA,KAAK,CAACE,IAAN,CAAYD,MAAM,CAACE,OAAnB;AACH,KAHK;;AAINC,IAAAA,WAAW,CAACJ,KAAD,EAAQC,MAAR,EAAe;AACtB,YAAMI,IAAI,GAAGL,KAAK,CAACM,IAAN,CAAWD,IAAI,IAAIA,IAAI,CAACE,EAAL,KAAYN,MAAM,CAACE,OAAtC,CAAb;AACAE,MAAAA,IAAI,CAACG,SAAL,GAAiB,CAACH,IAAI,CAACG,SAAvB;AACH,KAPK;;AAQNC,IAAAA,YAAY,CAACT,KAAD,EAAQC,MAAR,EAAe;AACvB,aAAM,EACF,GAAGD,KADD;AAEFU,QAAAA,MAAM,EAAE;AAFN,OAAN;AAIH;;AAbK;AAHiB,CAAD,CAA9B;AAoBA,OAAO,MAAM;AAACX,EAAAA,SAAD;AAAYK,EAAAA,WAAZ;AAAyBK,EAAAA;AAAzB,IAAyCb,UAAU,CAACe,OAA1D;AAEP,eAAef,UAAU,CAACgB,OAA1B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\nimport { createSelector } from \"reselect\"\nimport {  FILTER__COLOR_FILTER_CHANGED, TODOS__ALL_COMPLETED, TODOS__COLOR_SELECTED, TODOS__COMPLETED_CLEARED, TODOS__TODOS_LOADING,TODOS__TODOS_LOADING_FAILED,TODOS__TODOS_LOADED, TODOS__TODO_ADDED, TODOS__TODO_DELETED, TODOS__TODO_TOGGLED } from \"../../actionTypes\"\nimport { StatusFilters } from \"../filters/filtersSlice\"\n\n\n\n\n// ///////////////////////////////////////////////////////////////////////////\n// ////////////////////////////// WITHOUT REDUX TOOLKIT /////////////////////////   \n// export const StateStatus = {\n//     IDLE_STATUS : 'idle',\n//     LOADING_STATUS : 'loading',\n//     SUCCESS_STATUS : 'success',\n//     FAILURE_STATUS : 'failure',\n// }\n// const initialState = {\n//     status: 'idle',\n//     entities: {}\n// }\n//    \n// \n//  \n// const selectTodoIds = (state)=> (state.todos.map(( todo ) => todo.id ))\n// export const selectTodoIds = createSelector ( \n//     state => state.todos.entities,\n//     entities => entities.map( todo => todo.id )\n// )\n// export const selectTodos = (state) => state.todos.entities\n// export const selectTodoById = (state, todoId) => {\n    \n//     return selectTodos(state)[todoId]\n//   }\n\n// /**\n// takes in two args{todos-array, current status filter} \n// then outputs a list of active or completed todos based on the filter */\n// export const selectFilteredTodos = createSelector(\n//     state => state.todos,\n//     state => state.filters,\n//     ( todos, filters ) => {\n//         const { status, colors } = filters\n//         const showAllCompletions = status === StatusFilters.All\n\n//         if( showAllCompletions && colors.length === 0 ) {\n//             return todos.entities\n//         }\n//         const completedStatus = status === StatusFilters.Completed\n//         const newentities = todos.entities\n//         return Object.values(newentities).filter(( value ) => {\n\n//             const statusMatches = showAllCompletions || value.completed === completedStatus\n//             const colorMatches = colors.length === 0 || colors.includes(value.color)\n//             console.log(`matches: status${statusMatches}, color${colorMatches}`)\n//             return statusMatches && colorMatches\n//         })\n//     }\n// )\n\n// export const selectFilteredTodoIds = createSelector(\n//     selectFilteredTodos,\n\n//     filteredTodos => {\n//         console.log('filto...', filteredTodos)\n//         return filteredTodos\n//     }\n// )\n\n// // function nextTodoId( todos ) {\n//     const maxId = todos.reduce((maxId, todo) => Math.max(todo.id, maxId), -1)\n//     return maxId + 1\n// }\n// export default function todosReducer ( state = initialState, action) {\n//     switch ( action.type ) {\n//         case TODOS__TODOS_LOADING: {\n//             return {\n//                 ...state,\n//                 status: StateStatus.LOADING_STATUS\n//             }\n//         }\n//         case TODOS__TODOS_LOADING_FAILED: {\n//             return {\n//                 ...state,\n//                 status: StateStatus.FAILURE_STATUS\n//             }\n//         }\n//         case TODOS__TODOS_LOADED: {\n//             // const stateUpdate = state.concat(action.payload)\n//             // stateUpdate.map(( todo, idx ) => todo.id === idx ? \"\" : todo.id = idx)\n//             // const todos = action.payload.map(( todo ))\n//             const newEntities = {}\n//             action.payload.forEach(todo => {\n//                 newEntities[todo.id] = todo\n//             })\n//             return {\n//                 ...state,\n//                 status: StateStatus.IDLE_STATUS,\n//                 entities: newEntities\n                \n//             }\n//         }\n//         case TODOS__TODO_ADDED: {\n//             return {\n//                 ...state,\n//                 entities: {\n//                     ...state.entities,\n//                     [action.payload.id]: {\n//                         ...action.payload,\n//                         completed: false,\n//                         color: \"\"\n//                     }\n//                 }\n//             }\n                \n//         }\n//         case TODOS__TODO_TOGGLED: {\n//             const todoId = action.payload\n//             const todo = state.entities[todoId]\n//             return {\n//                 ...state,\n//                 entities:  {\n//                     ...state.entities,\n//                     [todoId]: {\n//                         ...todo, \n//                         completed: !todo.completed\n//                     }\n//                 }\n//             }\n//         }\n//         case TODOS__ALL_COMPLETED: {\n//             const newEntities = { ...state.entities }\n//             Object.values(newEntities).forEach(todo => {\n//                 newEntities[todo.id] = {\n//                 ...todo,\n//                 completed: true\n//                 }\n//             })\n//             return {\n//                 ...state,\n//                 entities: newEntities\n//             }\n//         }\n//         case TODOS__COLOR_SELECTED: {\n//             const { color, todoId } = action.payload\n//             const todo = state.entities[todoId]\n//             return {\n//                 ...state,\n//                 entities:  {\n//                     ...state.entities,\n//                     [todoId]: {\n//                         ...todo,\n//                         color\n//                     }\n//                 }\n//             }\n//         }\n//         case TODOS__COMPLETED_CLEARED: {\n//             const newEntities = { ...state.entities }\n//             Object.values(newEntities).forEach(todo => {\n//                 if (todo.completed) {\n//                 delete newEntities[todo.id]\n//                 }\n//             })\n//             return {\n//                 ...state,\n//                 entities: newEntities\n//             }\n//         }\n//         case TODOS__TODO_DELETED: {\n//             const newEntities = { ...state.entities }\n            \n//             delete newEntities[action.payload]\n//             return {\n//               ...state,\n//               entities: newEntities\n//             }\n//         }\n//         default: \n//             return state\n//     }\n// }\n\n// ///////////////////////////////////////////////////////////////////////////\n// ////////////////////////////// WITH REDUX TOOLKIT /////////////////////////\nconst initialState = []\nconst todosSlice = createSlice({\n    name: 'todos',\n    initialState,\n    reducers: {\n        todoAdded(state, action) {\n            state.push( action.payload )\n        },\n        todoToggled(state, action){\n            const todo = state.find(todo => todo.id === action.payload)\n            todo.completed = !todo.completed\n        },\n        todosLoading(state, action){\n            return{\n                ...state,\n                status: 'loading'\n            }\n        }\n    }\n})\n\nexport const {todoAdded, todoToggled, todosLoading} = todosSlice.actions\n\nexport default todosSlice.reducer\n"]},"metadata":{},"sourceType":"module"}