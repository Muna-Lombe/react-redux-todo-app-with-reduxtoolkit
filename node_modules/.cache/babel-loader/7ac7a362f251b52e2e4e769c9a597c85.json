{"ast":null,"code":"import { createAsyncThunk, createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\nimport { createSelector } from \"reselect\"; // import {  FILTER__COLOR_FILTER_CHANGED, TODOS__ALL_COMPLETED, TODOS__COLOR_SELECTED, TODOS__COMPLETED_CLEARED, TODOS__TODOS_LOADING,TODOS__TODOS_LOADING_FAILED,TODOS__TODOS_LOADED, TODOS__TODO_ADDED, TODOS__TODO_DELETED, TODOS__TODO_TOGGLED } from \"../../actionTypes\"\n\nimport { StatusFilters } from \"../filters/filtersSlice\";\nconst todosAdapter = createEntityAdapter();\nconst initialState = todosAdapter.getInitialState({\n  status: 'idle'\n});\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/todos?id=1&id=2&id=3&id=4&id=5');\n  const data = await response.json();\n  const todos = data.map(todo => Object.assign({\n    \"id\": todo.id,\n    \"text\": todo.title,\n    \"color\": \"\",\n    \"completed\": todo.completed\n  }));\n  return todos;\n});\nexport const saveNewTodos = createAsyncThunk('todos/saveNewTodo', async text => {\n  const initialTodo = {\n    text\n  };\n  const response = await fetch('https://jsonplaceholder.typicode.com/todos', {\n    method: 'POST',\n    body: JSON.stringify(initialTodo),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8'\n    }\n  });\n  const newTodo = await response.json();\n  return newTodo;\n});\nexport const updateTodo = createAsyncThunk('todos/updateTodo', async _ref => {\n  let {\n    text,\n    todoId\n  } = _ref;\n  const initialTodo = {\n    text\n  };\n  const response = await fetch(`https://jsonplaceholder.typicode.com/todos?id=${todoId}`, {\n    method: 'PUT',\n    body: JSON.stringify(initialTodo),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8'\n    }\n  });\n  const updatedTodo = await response.json();\n  return updatedTodo;\n});\nexport const deleteTodo = createAsyncThunk('todos/deleteTodo', async todoId => {\n  const response = await fetch(`https://jsonplaceholder.typicode.com/todos/${todoId}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8'\n    }\n  });\n  const deletedTodo = await response.json();\n  return {\n    id: todoId,\n    deletedTodo\n  };\n});\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    todoAdded(state, action) {\n      const todo = action.payload;\n      state.entities[todo.id] = todo;\n    },\n\n    todoToggled(state, action) {\n      const todoId = action.payload;\n      const todo = state.entities[todoId];\n      todo.completed = !todo.completed;\n    },\n\n    todoColorSelected: {\n      reducer(state, action) {\n        const {\n          color,\n          todoId\n        } = action.payload;\n        state.entities[todoId].color = color;\n      },\n\n      prepare(todoId, color) {\n        return {\n          payload: {\n            todoId,\n            color\n          }\n        };\n      }\n\n    },\n    //   todoDeleted(state, action) {\n    //     delete state.entities[action.payload]\n    //   },\n    todoDeleted: todosAdapter.removeOne,\n\n    allTodosCompleted(state, action) {\n      Object.values(state.entities).forEach(todo => {\n        todo.completed = true;\n      });\n    },\n\n    completedTodosCleared(state, action) {\n      const completedIds = Object.values(state.entities).filter(todo => todo.completed).map(todo => todo.id);\n      todosAdapter.removeMany(state, completedIds); // Object.values(state.entities).forEach((todo) => {\n      // if (todo.completed) {\n      //     delete state.entities[todo.id]\n      // }\n      // })\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchTodos.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchTodos.fulfilled, (state, action) => {\n      const newEntities = {};\n      action.payload.forEach(todo => {\n        newEntities[todo.id] = todo;\n      });\n      state.entities = newEntities;\n      state.status = 'idle';\n    }) // .addCase(saveNewTodos.fulfilled, (state, action) => {\n    //     const todo = action.payload\n    //     state.entities[todo.id] = todo\n    // })\n    .addCase(saveNewTodos.fulfilled, todosAdapter.addOne).addCase(updateTodo.pending, (state, action) => {\n      const todoId = action.payload.id;\n      const text = action.payload.text;\n      state.entities[todoId] = text;\n    });\n  }\n});\nexport const {\n  todoAdded,\n  todoToggled,\n  todosLoading,\n  todoColorSelected,\n  todoDeleted\n} = todosSlice.actions;\nexport default todosSlice.reducer;\nexport const {\n  selectAll: selectTodos,\n  selectById: selectTodoById\n} = todosAdapter.getSelectors(state => state.todos);\nexport const selectTodoIds = createSelector(selectTodos, todos => todos.map(todo => todo.id));\nexport const selectFilteredTodos = createSelector(selectTodos, state => state.filters, (todos, filters) => {\n  const {\n    status,\n    colors\n  } = filters;\n  const showAllCompletions = status === StatusFilters.All;\n\n  if (showAllCompletions && colors.length === 0) {\n    return todos;\n  }\n\n  const completedStatus = status === StatusFilters.Completed;\n  return todos.filter(todo => {\n    const statusMatches = showAllCompletions || todo.completed === completedStatus;\n    const colorMatches = colors.length === 0 || colors.includes(todo.color);\n    return statusMatches && colorMatches;\n  });\n});\nexport const selectFilteredTodoIds = createSelector(selectFilteredTodos, filteredTodos => filteredTodos.map(todo => todo.id));","map":{"version":3,"sources":["/home/muna/code/Muna-Lombe/tutorials/React/react-redux-todo-app-with-reduxtoolkit/src/features/todos/todosSlice.js"],"names":["createAsyncThunk","createEntityAdapter","createSlice","createSelector","StatusFilters","todosAdapter","initialState","getInitialState","status","fetchTodos","response","fetch","data","json","todos","map","todo","Object","assign","id","title","completed","saveNewTodos","text","initialTodo","method","body","JSON","stringify","headers","newTodo","updateTodo","todoId","updatedTodo","deleteTodo","deletedTodo","todosSlice","name","reducers","todoAdded","state","action","payload","entities","todoToggled","todoColorSelected","reducer","color","prepare","todoDeleted","removeOne","allTodosCompleted","values","forEach","completedTodosCleared","completedIds","filter","removeMany","extraReducers","builder","addCase","pending","fulfilled","newEntities","addOne","todosLoading","actions","selectAll","selectTodos","selectById","selectTodoById","getSelectors","selectTodoIds","selectFilteredTodos","filters","colors","showAllCompletions","All","length","completedStatus","Completed","statusMatches","colorMatches","includes","selectFilteredTodoIds","filteredTodos"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createEntityAdapter, createSlice } from \"@reduxjs/toolkit\"\nimport { createSelector } from \"reselect\"\n// import {  FILTER__COLOR_FILTER_CHANGED, TODOS__ALL_COMPLETED, TODOS__COLOR_SELECTED, TODOS__COMPLETED_CLEARED, TODOS__TODOS_LOADING,TODOS__TODOS_LOADING_FAILED,TODOS__TODOS_LOADED, TODOS__TODO_ADDED, TODOS__TODO_DELETED, TODOS__TODO_TOGGLED } from \"../../actionTypes\"\nimport { StatusFilters } from \"../filters/filtersSlice\"\n\n const todosAdapter =  createEntityAdapter()\n const initialState = todosAdapter.getInitialState({\n     status: 'idle'\n })\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\n    const response = await fetch('https://jsonplaceholder.typicode.com/todos?id=1&id=2&id=3&id=4&id=5')\n    const data = await response.json()\n    const todos = data.map(( todo ) => Object.assign({\"id\": todo.id, \"text\": todo.title, \"color\": \"\", \"completed\": todo.completed }) )\n    return todos\n})\n\nexport const saveNewTodos = createAsyncThunk('todos/saveNewTodo', async (text) => {\n    const initialTodo = { text }\n    const response = await fetch('https://jsonplaceholder.typicode.com/todos',\n                                {\n                                    method: 'POST',\n                                    body: JSON.stringify(initialTodo),\n                                    headers: {\n                                        'Content-type': 'application/json; charset=UTF-8'\n                                    }\n                                })\n    const newTodo = await response.json()\n    return newTodo\n})\n\nexport const updateTodo = createAsyncThunk('todos/updateTodo', async ({text, todoId}) => {\n    const initialTodo = { text }\n    const response = await fetch(`https://jsonplaceholder.typicode.com/todos?id=${todoId}`,\n                                        {\n                                            method: 'PUT',\n                                            body: JSON.stringify(initialTodo),\n                                            headers: {\n                                                'Content-type': 'application/json; charset=UTF-8'\n                                            }\n                                        })\n    const updatedTodo = await response.json()    \n    return updatedTodo                               \n})\n\nexport const deleteTodo = createAsyncThunk('todos/deleteTodo', async (todoId) => {\n    const response = await fetch(`https://jsonplaceholder.typicode.com/todos/${todoId}`,\n                                        {\n                                            method: 'DELETE',\n                                            headers: {\n                                                'Content-type': 'application/json; charset=UTF-8'\n                                            }\n                                        })\n    const deletedTodo = await response.json()\n    return { id: todoId, deletedTodo }\n\n})\n            \n    \nconst todosSlice = createSlice({\n    name: 'todos',\n    initialState,\n    reducers: {\n        todoAdded(state, action) {\n            const todo = action.payload\n            state.entities[todo.id] = todo\n        },\n        todoToggled(state, action) {\n            const todoId = action.payload\n            const todo = state.entities[todoId]\n            todo.completed = !todo.completed\n        },\n        todoColorSelected: {\n            reducer(state, action) {\n            const { color, todoId } = action.payload\n            state.entities[todoId].color = color\n            },\n            prepare(todoId, color) {\n            return {\n                payload: { todoId, color },\n            }\n            },\n        },\n        //   todoDeleted(state, action) {\n\n        //     delete state.entities[action.payload]\n        //   },\n        todoDeleted: todosAdapter.removeOne, \n        allTodosCompleted(state, action) {\n            Object.values(state.entities).forEach((todo) => {\n            todo.completed = true\n            })\n        },\n        completedTodosCleared(state, action) {\n            const completedIds = Object.values(state.entities)\n                .filter((todo) => todo.completed)\n                .map((todo) => todo.id)\n            todosAdapter.removeMany(state, completedIds)\n            // Object.values(state.entities).forEach((todo) => {\n            // if (todo.completed) {\n            //     delete state.entities[todo.id]\n            // }\n            // })\n      },\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchTodos.pending, (state, action) => {\n                state.status = 'loading'\n            })\n            .addCase(fetchTodos.fulfilled, (state, action) => {\n                const newEntities = {}\n                action.payload.forEach((todo) => {\n                newEntities[todo.id] = todo\n                })\n                state.entities = newEntities\n                state.status = 'idle'\n            })\n            // .addCase(saveNewTodos.fulfilled, (state, action) => {\n            //     const todo = action.payload\n            //     state.entities[todo.id] = todo\n            // })\n            .addCase(saveNewTodos.fulfilled, todosAdapter.addOne)\n            .addCase(updateTodo.pending, (state, action) => {\n                const todoId = action.payload.id\n                const text = action.payload.text\n                state.entities[todoId] = text\n            })\n\n    }\n  })\n\nexport const {todoAdded, todoToggled, todosLoading, todoColorSelected, todoDeleted} = todosSlice.actions\n\nexport default todosSlice.reducer\n\nexport const { selectAll: selectTodos, selectById: selectTodoById } = todosAdapter.getSelectors( state => state.todos )\n\nexport const selectTodoIds = createSelector(\n    selectTodos,\n    todos => todos.map(todo => todo.id)\n)\n\nexport const selectFilteredTodos = createSelector(\n    selectTodos,\n    state => state.filters,\n    (todos, filters) => {\n        const {status, colors} = filters\n        const showAllCompletions = status === StatusFilters.All\n        if (showAllCompletions && colors.length === 0){\n            return todos\n        }\n        const completedStatus = status === StatusFilters.Completed\n        return todos.filter( todo => {\n            const statusMatches = showAllCompletions || todo.completed === completedStatus\n            const colorMatches = colors.length === 0 || colors.includes(todo.color)\n            return statusMatches && colorMatches\n        })\n    }\n)\n\nexport const selectFilteredTodoIds = createSelector(\n    selectFilteredTodos,\n    filteredTodos => filteredTodos.map((todo) => todo.id)\n)\n\n"]},"metadata":{},"sourceType":"module"}