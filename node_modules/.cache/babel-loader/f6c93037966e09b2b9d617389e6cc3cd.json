{"ast":null,"code":"var _jsxFileName = \"/home/muna/code/Muna-Lombe/tutorials/React/react-redux-todo-app-with-reduxtoolkit/src/features/header/Header.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { saveNewTodo } from '../todos/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Header = () => {\n  _s();\n\n  const [text, setText] = useState('');\n  const [status, setStatus] = useState('idle');\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    setText(e.target.value);\n  };\n\n  const handleKeyDown = async e => {\n    const trimmedText = e.target.value.trim();\n\n    if (e.key === 'Enter' && trimmedText) {\n      setStatus('loading');\n      await dispatch(saveNewTodo(trimmedText));\n      setText('');\n      setStatus('idle');\n    }\n  };\n\n  let isLoading = status === 'loading';\n  let placeholder = isLoading ? '' : 'What needs to be done?';\n  let loader = isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loader\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 28\n  }, this) : null;\n  return /*#__PURE__*/_jsxDEV(\"header\", {\n    className: \"header\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"new-todo\",\n      placeholder: placeholder,\n      autoFocus: true,\n      value: text,\n      onChange: handleChange,\n      onKeyDown: handleKeyDown,\n      disabled: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), loader]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Header, \"bu3jyiLFL6S4fm1axEXEwBByKhM=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Header;\nexport default Header;\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["/home/muna/code/Muna-Lombe/tutorials/React/react-redux-todo-app-with-reduxtoolkit/src/features/header/Header.js"],"names":["React","useState","useDispatch","saveNewTodo","Header","text","setText","status","setStatus","dispatch","handleChange","e","target","value","handleKeyDown","trimmedText","trim","key","isLoading","placeholder","loader"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,kBAA5B;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,MAAD,CAApC;AACA,QAAMQ,QAAQ,GAAGP,WAAW,EAA5B;;AAEA,QAAMQ,YAAY,GAAIC,CAAD,IAAO;AACxBL,IAAAA,OAAO,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AACH,GAFD;;AAIA,QAAMC,aAAa,GAAG,MAAMH,CAAN,IAAY;AAC9B,UAAMI,WAAW,GAAGJ,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeG,IAAf,EAApB;;AACA,QAAIL,CAAC,CAACM,GAAF,KAAU,OAAV,IAAqBF,WAAzB,EAAsC;AAClCP,MAAAA,SAAS,CAAC,SAAD,CAAT;AACA,YAAMC,QAAQ,CAACN,WAAW,CAACY,WAAD,CAAZ,CAAd;AACAT,MAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,MAAAA,SAAS,CAAC,MAAD,CAAT;AACH;AACJ,GARD;;AAUA,MAAIU,SAAS,GAAGX,MAAM,KAAK,SAA3B;AACA,MAAIY,WAAW,GAAGD,SAAS,GAAG,EAAH,GAAQ,wBAAnC;AACA,MAAIE,MAAM,GAAGF,SAAS,gBAAG;AAAK,IAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,UAAH,GAAgC,IAAtD;AACA,sBACE;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAAA,4BACE;AACE,MAAA,SAAS,EAAC,UADZ;AAEE,MAAA,WAAW,EAAEC,WAFf;AAGE,MAAA,SAAS,EAAE,IAHb;AAIE,MAAA,KAAK,EAAEd,IAJT;AAKE,MAAA,QAAQ,EAAEK,YALZ;AAME,MAAA,SAAS,EAAEI,aANb;AAOE,MAAA,QAAQ,EAAEI;AAPZ;AAAA;AAAA;AAAA;AAAA,YADF,EAUGE,MAVH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CApCD;;GAAMhB,M;UAGaF,W;;;KAHbE,M;AAsCN,eAAeA,MAAf","sourcesContent":["import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { saveNewTodo } from '../todos/actions'\n\nconst Header = () => {\n  const [text, setText] = useState('')\n  const [status, setStatus] = useState('idle')\n  const dispatch = useDispatch()\n\n  const handleChange = (e) => {\n      setText(e.target.value)\n  }\n  \n  const handleKeyDown = async(e) => {\n      const trimmedText = e.target.value.trim()\n      if( e.key === 'Enter' && trimmedText) {\n          setStatus('loading')\n          await dispatch(saveNewTodo(trimmedText))\n          setText('')\n          setStatus('idle')\n      }\n  }\n\n  let isLoading = status === 'loading'\n  let placeholder = isLoading ? '' : 'What needs to be done?'\n  let loader = isLoading ? <div className=\"loader\" /> : null\n  return (\n    <header className=\"header\">\n      <input\n        className=\"new-todo\"\n        placeholder={placeholder}\n        autoFocus={true}\n        value={text}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        disabled={isLoading}\n      />\n      {loader}\n    </header>\n  )\n}\n\nexport default Header"]},"metadata":{},"sourceType":"module"}